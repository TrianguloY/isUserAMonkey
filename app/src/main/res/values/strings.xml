<resources>
    <string name="app_name">AndroidSDK easter egg showcase</string>
    <string name="about">Did you know that the Android SDK contains a method called isUserAMonkey? And the gravity of the death star?\nThere are several easter eggs present, here is a mostly complete list of them all, with a full explanation and the ability to trigger/test them yourself!.\n\n\nApp developed by [[TrianguloY]].\nThe source code of the app is available on [[GitHub]].\n\n\nSpecial thanks to the following pages: \'[[proper-use-cases-for-android-usermanager-isuseragoat]]\', \'[[strange-function-in-activitymanager-isuseramonkey-what-does-this-mean-what-is]]\', \'[[jokes-and-humour-in-the-public-android-api]]\' and [[Android-Documentation-Easter-Eggs]].</string>

    <string name="press">Press the \'run\' button above to execute the function</string>
    <string name="crash">(code crashed)</string>
    <string name="no_browser">Can\'t open links, is a browser installed?</string>
    <string name="no_value">(no return value)</string>
    <string name="unsupported">(not supported)</string>
    <string name="waiting">(waiting for result)</string>

    <string name="service_toast">Obtained transaction code: %d</string>

    <string name="m_function">ActivityManager.[[isUserAMonkey]]();</string>
    <string name="m_summary">The android SDK contains a strange function called \'[[isUserAMonkey]]\'.\nAre you a Monkey? Let\'s find out!</string>
    <string name="m_explanation">According to the [[isUserAMonkey|official documentation]]:\n\n<i>Returns \"true\" if the user interface is currently being messed with by a monkey.</i>\n\nInternally this function checks for a test suite program, called \'[[monkey]]\', that tries to press randomly on the screen (like a monkey). This is usually used for automatic tests, so this function could be used to see if such test is running or not.</string>
    <string name="m_true">The function returned true, you are a monkey!\nThis means that you are using a testing device with the \'[[monkey]]\' testing suite program that presses randomly on the screen. Or perhaps your ROM did this on purpose?</string>
    <string name="m_false">The function returned false, this is the expected result.\nThis means that you are not using a testing device with the \'[[monkey]]\' testing suite program that presses randomly on the screen.</string>
    <string name="m_froyo">Apparently you are using a device under Android 2.2, where this method doesn\'t exists yet…but it run? Are you really using a device that old? Well, in that case: %s</string>
    <string name="m_crash">For some reason the function crashed, this was unexpected, as this function should exists and run correctly. Maybe your ROM messed it somehow?</string>
    <string name="m_unavailable">In your prehistoric device (under Android 2.2) the method didn\'t exist yet, and so it crashed. You really have a relic on your hands!</string>

    <string name="g_function">userManager.[[isUserAGoat]]();</string>
    <string name="g_summary">The Android SDK also contains another strange function called \'[[isUserAGoat]]\'.\nAre you a Goat? Press to check!</string>
    <string name="g_explanation">This function, which was added in Android 4.2 (previously it didn\'t exist) was, according to the [[isUserAGoat|official documentation]]:\n\n<i>Used to determine whether the user making this call is subject to teleportations.\nReturns whether the user making this call is a goat.</i>\n\nOriginally the function always returned false, which could had been used as an internal joke, or an easter egg, or perhaps as a tool for coding purposes (the compiler removes code which is known to never execute, like \'if(false)…\' but sometimes you do need that code in the final app, so calling instead a function avoids the compiler code deletion process).\n\nWhen Android 5.0 was released, this function changed to check whether the user had installed the \'[[Goat Simulator]]\' app, probably to confirm the joke, with the message:\n\"As of LOLLIPOP, this method can now automatically identify goats using advanced goat recognition technology.\"\n\nThen, when Android 11 released, this function was changed again to always return false with description\n\"As of R, this method always returns false in order to protect goat privacy.\"\nThis version increased the requirements for apps to detect other installed apps, so most probably this method was changed for the same purpose, to avoid leaking information about an installed app.</string>
    <string name="g_jb">This was unexpected, you are using a device with Android below 4.2 where this function shouldn\'t exist, but it does? Perhaps you are using a ROM which decided to implement it.</string>
    <string name="g_lollipop_true">This was unexpected! You are using a device with Android version between 4.2 and 5.0, where this function was hardcoded to always return false. But it returned true?? Maybe you are using a ROM which changed it?</string>
    <string name="g_lollipop_false">You are using a device with Android version between 4.2 and 5.0, where this function was hardcoded to always return false, so this was the expected result.</string>
    <string name="g_true">You are using a device with Android between 5.0 and 11.0, where a \'true\' result means that you have the \'[[Goat Simulator]]\' app installed!</string>
    <string name="g_false">You are using a device with Android between 5.0 and 11.0, where a \'false\' result means that you don\'t have the \'[[Goat Simulator]]\' app installed.</string>
    <string name="g_r_true">This was unexpected!\nYou are using a device with Android version above 11.0, where this function was hardcoded to always return false. But it returned true?? Maybe you are using a ROM which changed it? Or a future Android version where it was changed again??</string>
    <string name="g_r_false">You are using a device with Android version above 11.0, where this function was hardcoded to always return false, so this was the expected result.</string>
    <string name="g_unavailable">The function is unavailable on Android below 4.2, so unfortunately it crashes when you try to run it.</string>
    <string name="g_crash">This was unexpected, you are using a device with Android above 4.1 where this function should exist, yet it crashed for you. Perhaps it was removed from a future android version?</string>

    <string name="f_function">userManager.hasUserRestriction(UserManager.[[DISALLOW_FUN]]);</string>
    <string name="f_summary">This constant is present in the Android SDK, is your device restricting the \'fun\'? Hopefully not!</string>
    <string name="f_explanation">This constant checks for the device policy that \'disallows fun\', which basically disables the Android version easter egg (when you press several times on the android version inside the android settings). The exact [[DISALLOW_FUN|documentation]] is:\n\n<i>Specifies if the user is not allowed to have fun. In some cases, the device owner may wish to prevent the user from experiencing amusement or joy while using the device. The default value is false.</i>\n\nIt is not sure if there are other third-party apps that react to this policy, maybe this app is the first one?</string>
    <string name="f_unavailable">The function is unavailable on Android below 6, so unfortunately it crashes when you try to run it.</string>
    <string name="f_crash">This was unexpected! The function should be available on Android above 5, yet it crashed for you, perhaps it was removed on a future android version?</string>
    <string name="f_true">Oh no, you are not allowed to have fun, please read this with a monotone voice and don\'t smile.</string>
    <string name="f_false">This was the expected outcome. You are allowed to have fun! Let\'s rejoice! This also means you can play/run the android settings easter egg, have you tried it yet?</string>
    <string name="f_m">This was unexpected! The function should be unavailable on Android below 6, yet in your case it didn\'t crash? Maybe your ROM implemented it? In that case: %s</string>

    <string name="c_function">chronometer.[[isTheFinalCountdown]]();</string>
    <string name="c_summary">When creating a chronometer, you can check if it\'s the final countdown. I just created one for you…will it be?</string>
    <string name="c_explanation">This method, with a simple [[isTheFinalCountdown|documentation]] of \"<i>[returns] whether this is the final countdown</i>\", is hardcoded to open the Youtube video for the song \'[[The final countdown]]\' by Europe. It even opens it [[FLAG_ACTIVITY_LAUNCH_ADJACENT|adjacent to the current app]], which is not a very used/known feature by developers.\nIt will return true if the video was correctly opened, false if there was en error doing so.</string>
    <string name="c_true">The method run as expected, the video should have been opened, enjoy!</string>
    <string name="c_false">The method run, but apparently it failed to open the video. Perhaps you don\'t have any app that can open it?</string>
    <string name="c_unavailable">The method is only present on android 8.0 and above, which means that unfortunately on your device it crashes because it doesn\'t exist.</string>
    <string name="c_crash">Even though you are on a device above 8.0, the method crashed on your device, which is odd.</string>
    <string name="c_available">This method should be available only on Android 8.0 and above, yet it didn\'t crash for you? Did your ROM implemented it? In that case: %s</string>

    <string name="j_function">packageManager.hasSystemFeature(PackageManager.[[FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND]]);</string>
    <string name="j_summary">Do you have Jazz Hands? Will your device support them?</string>
    <string name="j_explanation">This constant\'s name may have been added as a joke, but at least here the [[FEATURE_TOUCHSCREEN_MULTITOUCH_JAZZHAND|documentation]] explains it properly:\n\n<i>The device\'s touch screen is capable of tracking a full hand of fingers fully independently — that is, 5 or more simultaneous independent pointers.</i>\n\nBasically: it\'s a way for applications to know if the device is able to detect at least 5 independent fingers moving on the screen, which is a capability that nowadays should have almost all (if not all) devices. With the developer option to show the pointers on the screen you can easily check it if you want to make sure.</string>
    <string name="j_true">Ya like Jazz? Because your device supports it :P\nAnyway, this was the expected outcome, as nowadays most/all devices support detecting 5 or more fingers on the screen.</string>
    <string name="j_false">(jazz music stops)\nOh no, you can\'t play jazz on this device!\nThis basically means that your device is not able to detect 5 or more fingers simultaneously, perhaps only 2?.</string>
    <string name="j_unavailable">The constant was added on Android 2.3, and your device is so old it still don\'t have it, so it crashes.</string>
    <string name="j_crash">That was unexpected, this constant is available since Android 2.3, but for some reason it crashed on your device. Either you somehow managed to install this app on an unsupported android version, or this constant was removed on a future one.</string>
    <string name="j_g">Unexpected! The constant should not be available on your device under Android 2.3, yet it run without issue, perhaps your ROM implemented it? In that case:\n%s</string>

    <string name="wtf_function">Log.[[wtf]](\"TAG\", \"msg\");</string>
    <string name="wtf_summary">WTF means \'What a Terrible Failure\', duh. Here on Android you can log data representing exactly that.\n\nImportant note: According to the documentation, running this method may terminate the activity, so if the app crashes after running, that\'s why.</string>
    <string name="wtf_explanation">The [[wtf|documentation]] states:\n\n<i>What a Terrible Failure: Report a condition that should never happen. The error will always be logged at level ASSERT with the call stack. Depending on system configuration, a report may be added to the DropBoxManager and/or the process may be terminated immediately with an error dialog.</i>\n\nWhen programming on Android, you can use some special logging methods to \'log\' messages on an internal registry, called [[logcat]]. This is a standard practice in frameworks and applications. Furthermore, you can specify the \'severity\' (or level) of the message, in order to filter them later. The severities that android supports, in priority order, are: verbose, debug, info, warn, error and assert. To log them, you have one method for each, with names v, d, i, w, e and wtf respectively. It\'s strange that the assert level doesn\'t follow the convention and isn\'t called \'a\', whoever implemented it may have find it funny and it has stuck since, considering that all methods and severities are on the sdk since Android 1, yet the wtf method was added on Android 2.2!</string>
    <string name="wtf_crash">Something bad happened and the method crashed…for some unknown reason.</string>
    <string name="wtf_f">WTF? The method was added on Android 2.2, yet your device apparently is older…but it worked? Did you hacked it somehow? Then: %s</string>
    <string name="wtf_positive">The method run and logged the message as expected, returning a positive value to indicate success. If you want to check the message yourself, unfortunately you will need to use ADB (or root privileges) to access the [[logcat]].</string>
    <string name="wtf_nonpositive">The method run, but did not logged the message for some reason (or maybe I didn\'t understand the explanation of the return value? it returned a non-positive value, which should mean failure)</string>
    <string name="wtf_unavailable">On a device that old (before Android 2.2) the method was not available, sorry.</string>

    <string name="fyi_function">adapterViewFlipper.[[fyiWillBeAdvancedByHostKThx]]();</string>
    <string name="fyi_summary">For your information, this easter egg is just a strangely named method, OK thanks.</string>
    <string name="fyi_explanation">Just a normal function with a really strange name, perhaps the developer forgot to change it and the code review didn\'t noticed it.\nNot much to say here other than saying than naming things are hard. For completion, this is the [[fyiWillBeAdvancedByHostKThx|documentation]]:\n\n<i>Called by an AppWidgetHost to indicate that it will be automatically advancing the views of this AdapterViewFlipper by calling AdapterViewFlipper.advance() at some point in the future. This allows AdapterViewFlipper to prepare by no longer Advancing its children.</i></string>
    <string name="fyi_run">The method run…and that\'s it. Unfortunately it\'s a void method which means that it changes some things internally and doesn\'t return anything.</string>
    <string name="fyi_unexpected">Strange, the method should not have been available on your device with Android below 3.0, yet it run as expected. In any case:\n\n%s</string>
    <string name="fyi_unavailable">This method was added on Android 3.0, which means that your device does not implement it, and so it crashes.</string>
    <string name="fyi_crash">Even though your device is above Android 3.0, where this method was introduced, it crashed. Maybe on a future android version it was finally renamed?</string>

    <string name="tw_function">service.transact(IBinder.[[TWEET_TRANSACTION]], …);</string>
    <string name="tw_summary">Services can communicate, this one here apparently \'tweets\'. But that\'s something that birds do, right?</string>
    <string name="tw_true">Here is your cup of tea ☕. Jolly good message old boy!\n\n<u>(Please check the detailed description for the full explanation and meaning of this result)</u></string>
    <string name="tw_false">The code didn\'t crash, but either I made some mistake on the implementation or the service failed. Check the detailed description for more information about what should have happened.</string>
    <string name="tw_crash">Trying to send the transaction crashed. There are quite some steps involved (check the detailed description) so perhaps the mistake is on my part. If so, I\'m sorry.</string>
    <string name="tw_unexpected">Android 3.2 do not have that constant but the code did not crash. Let\'s assume it did: %s</string>
    <string name="tw_unavailable">You are using a device with Android below 3.2, released in July 2011. That constant didn\'t exist yet.</string>
    <string name="tw_explanation">One of the method on android to communicate between different parts of the system (either inside applications or between them) is with the concept of [[services]]. You can \'bound\' with a service, and communicate with it. For this communication, the processes transfer some data and a code to indicate which \'action\' the service should do. The code could theoretically be anything (between a range), but Android provides some constants, like PING_TRANSACTION or SHELL_COMMAND_TRANSACTION, for some actions (not sure if Android itself uses them or they are just suggestions for developers). The TWEET_TRANSACTION (and LIKE_TRANSACTION from the next easter egg ♥) are two of them.\nThere is nothing special about them as far as I\'m aware, they are just \'there\'.\nIn order to properly test this feature, the app implements a very basic service that will just display a toast (a small message at the bottom) with the received code value.\n\nIn the case of the TWEET_TRANSACTION (which is translated as the code value <i>1599362900</i>, or <i>(\'_\'&lt;&lt;&lt;24)|(\'T\'&lt;&lt;16)|(\'W\'&lt;&lt;8)|\'T\')</i> the [[TWEET_TRANSACTION|documentation]] says:\n\n<i>IBinder protocol transaction code: send a tweet to the target object. The data in the parcel is intended to be delivered to a shared messaging service associated with the object; it can be anything, as long as it is not more than 130 UTF-8 characters to conservatively fit within common messaging services. As part of Build.VERSION_CODES.HONEYCOMB_MR2, all Binder objects are expected to support this protocol for fully integrated tweeting across the platform. To support older code, the default implementation logs the tweet to the main log as a simple emulation of broadcasting it publicly over the Internet.\nAlso, upon completing the dispatch, the object must make a cup of tea, return it to the caller, and exclaim \"jolly good message old boy!\".</i>\n\nAs you can see, this is a clear reference to [[Twitter]], at least it was when the easter egg was introduced (nowadays you can send messages with more than 130 characters…and of course it\'s not called Twitter anymore, but the reference still stands). By the way: I don\'t know what the \'jolly\' part is about, but I made sure to properly implement it ;)</string>

    <string name="lk_function">service.transact(IBinder.[[LIKE_TRANSACTION]], …);</string>
    <string name="lk_summary">Don\'t forget to give a like!</string>
    <string name="lk_true">(The app self esteem was improved).\n\n<u>(Please check the detailed description for the full explanation and meaning of this result)</u></string>
    <string name="lk_false">The code didn\'t crash, but either I made some mistake on the implementation or the service failed. Check the detailed description for more information about what should have happened.</string>
    <string name="lk_crash">Trying to send the transaction crashed. There are quite some steps involved (check the detailed description) so perhaps the mistake is on my part. If so, I\'m sorry.</string>
    <string name="lk_unexpected">Even though the constant was added on Android 4.03, your device reports a version below that, yet the constant exists, so: %s</string>
    <string name="lk_unavailable">Unfortunately you can\'t send a \'like\', you are too old (below Android 4.03 to be precise).</string>
    <string name="lk_explanation">Please check the previous easter egg (🐦 TWEET_TRANSACTION) for the full explanation.\n\nIn the case of the LIKE_TRANSACTION (which is translated as the code value <i>1598835019</i>, or <i>(\'_\'&lt;&lt;24)|(\'L\'&lt;&lt;16)|(\'I\'&lt;&lt;8)|\'K\')</i> the documentation says:\n\n<i>IBinder protocol transaction code: tell an app asynchronously that the caller likes it. The app is responsible for incrementing and maintaining its own like counter, and may display this value to the user to indicate the quality of the app. This is an optional command that applications do not need to handle, so the default implementation is to do nothing.\nThere is no response returned and nothing about the system will be functionally affected by it, but it will improve the app\'s self-esteem.</i></string>

    <string name="tri_function">sensorManager.registerListener(…, SensorManager.[[SENSOR_TRICORDER]], …);</string>
    <string name="tri_summary">Full alert. [[Tricorder]] readings, Mister Spock. Life detection.</string>
    <string name="tri_unsupported">Unfortunately, as expected, there is no Tricorder on your device.</string>
    <string name="tri_crash">Unfortunately the code crashed, perhaps because the Tricorder was finally removed on a future android version?</string>
    <string name="tri_result">Surprisingly, there IS a Tricorder on your device (did you hacked it? Or perhaps your ROM simulates one?) and so you can check the values it provided.</string>
    <string name="tri_explanation">On android, in order to read from one of the available sensors (like gyroscope, accelerometer, light sensor, etc) you need to register a listener with the sensor manager, specifying which sensor to register to. There is one constant for each device type, and one of them is this Tricorder, whose [[SENSOR_TRICORDER|documentation]] simply says \"<i>A constant describing a Tricorder. See SensorListener for more details.</i>\".\n\nA [[Tricorder]] is a fictional device from the Star Trek universe, capable of scanning, recording and analyzing. Since it\'s a fictional device, trying to read from it will most probably fail, I wonder if there is a ROM somewhere that implements it… (if there is, this app WILL be able to read from it!).\nAdditionally, the constant is deprecated with a notice of \"<i>Deprecated: use Sensor instead.</i>\". This deprecation notice is present in all sensor constants from SensorManager. However, in the [[Sensor]] class, there are alternative constants for the other sensors…but not for a Tricorder!</string>

    <string name="ds_function">SensorManager.[[GRAVITY_DEATH_STAR_I]];</string>
    <string name="ds_summary">Is the Death Star big enough to have it\'s own gravity? The Android SDK may have the answer</string>
    <string name="ds_result">There you have, that\'s the exact gravity of the Death Star (at least according to the Android developers), in Imperial Units of course.</string>
    <string name="ds_crash">Uh oh, the code crashed. Most probably this constant was remove on a future android version.</string>
    <string name="ds_explanation">Again, on Android you have several predefined constants for things that may be useful for developers. Here on the Sensor Manager you have a constant with the Gravity of the Earth (for the accelerometer) but also constants for the Sun, the Moon, and the other planets of the Solar system (+ pluto).\nAdditionally, there are two extra constants referencing fictional objects: one is for the death star, the other for \'The island\' (check the next easter egg 🏝 on this app for more info).\nThe full list of constants is GRAVITY_DEATH_STAR_I, GRAVITY_EARTH, GRAVITY_JUPITER, GRAVITY_MARS, GRAVITY_MERCURY, GRAVITY_MOON, GRAVITY_NEPTUNE, GRAVITY_PLUTO, GRAVITY_SATURN, GRAVITY_SUN, GRAVITY_THE_ISLAND, GRAVITY_URANUS, GRAVITY_VENUS.\n\nIn the Death Star case, the [[GRAVITY_DEATH_STAR_I|documentation]] just says: \"<i>Gravity (estimate) on the first Death Star in Empire units (m/s^2)</i>\", and it\'s defined as 3.5303614E-7 (fun fact! the exact definition on the source code is <i>0.000000353036145f</i>, which I couldn\'t find any explanation of, but due to limitation in the float type it is truncated to 0.00000035303614f).</string>

    <string name="is_function">SensorManager.[[GRAVITY_THE_ISLAND]];</string>
    <string name="is_summary">The island holds many secrets</string>
    <string name="is_result">The numbers, Mason, what do they mean?</string>
    <string name="is_crash">Uh oh, the code crashed. Most probably this constant was remove on a future android version.</string>
    <string name="is_explanation">As with the previous 🪐 GRAVITY_DEATH_STAR_I easter egg (where you can find more information about all the gravity constants), this one is a reference for the Island in the tv series \'[[Lost]]\'.\n\nThe [[GRAVITY_THE_ISLAND|documentation]] simply states \"<i>Gravity on the island</i>\" and has a constant value of 4.815162.\nAs with the previous instance, the exact constant as defined in the source code is <i>4.815162342f</i> (if you know about the series you\'ll realize these are The Numbers: 4 8 15 16 23 42), but due to java floats limitation it is truncated to 4.815162f.</string>

    <string name="blk_function"><![CDATA[layoutInflater.inflate(\"<blink …><TextView … /></blink>\");]]></string>
    <string name="blk_summary">Let\'s party like it\'s 1995!</string>
    <string name="blk_text">I should be blinking!</string>
    <string name="blk_result">You should see a string blinking by itself, I\'m not doing anything!.\nUnfortunately I can\'t check if it is working as expected, I can only say that the code did not crash.</string>
    <string name="blk_crash">Strangely, the code crashed. Perhaps this undocumented feature was finally removed?</string>
    <string name="blk_explanation">This one is a completely undocumented feature, even Android Studio reports that the &lt;blink&gt; tag doesn\'t exist (yet it DOES). I only knew about it thanks to [[jokes-and-humour-in-the-public-android-api|this blog post]], where it is explained that this \'feature\' was added in a [[commit]] in 2011 with the description: \"<i>Improve LayoutInflater\'s compliance. There are standards, we should do our best to implement them properly.</i>\".\nThe exact code nowadays is slightly different, but the check and the class still persists:\n\n<i>...\nprivate static final String TAG_1995 = \"blink\";\n...\nif (name.equals(TAG_1995)) {\n    // Let\'s party like it\'s 1995!\n    return new BlinkLayout(context, attrs);\n}</i>\n\nThe BlinkLayout class is private, so you can only use it by inflating an xml layout with a &lt;blink&gt; component.\nThis layout class will then make the text blink with a period of 500ms (0.5s visible, 0.5s invisible, repeat). And, additionally, the internal constant that the class uses to manage the logic is defined as <i>0x42</i>! Blinking is truly [[42|the answer to life, the universe and everything]].</string>
</resources>